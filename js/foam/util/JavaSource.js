/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

CLASS({
  package: 'foam.util',
  name: 'JavaSource',

  requires: [
    'foam.core.types.StringEnumProperty',
  ],

  documentation: function() {/* Generates Java source code from a FOAM
    model. Add a template for each model, named by CONSTANTIZED_MODEL_ID.
  */},

  properties: [
    {
      name: 'android',
      documentation: 'Set to true when building for Android.',
      defaultValue: false
    },
    {
      name: 'flag',
      defaultValueFn: function() { return this.android ? 'android' : 'java'; }
    },
  ],

  methods: [
    function prepModel_(model) {
      // Java doesn't support traits, so we'll copy traits into the model directly.
      model = model.deepClone();

      var features = ['properties', 'methods'];
      for ( var i = 0; i < model.traits.length; i++ ) {
        var trait = this.X.lookup(model.traits[i]);

        for ( var fi = 0; fi < features.length; fi++) {
          var feature = features[fi];
          if (!trait[feature] || trait[feature].length === 0) continue;
          for ( var j = 0; j < trait[feature].length; j++ ) {
            var traitVal = trait[feature][j];

            for ( var k = 0; k < model[feature].length; k++ ) {
              var val = model[feature][k];
              if ( val.name === traitVal.name ) {
                model[feature][k] = traitVal.deepClone().copyFrom(val);
                break;
              }
            }
            if ( k === model[feature].length ) {
              model[feature].push(traitVal);
            }
          }
        }
      }

      for (i = 0; i < features.length; i++) {
        model[features[i]] = model[features[i]];
      }

      return model;
    },

    function generate(model) {
      model = this.prepModel_(model);
      return this.javaSource.call(model, null, this);
    },
  ],

  templates: [
    function javaSource(out, javaSource) {/*// Generated by FOAM, do not modify.
// Version <%= this.version %><%
  var className       = this.javaClassName;
  var parentClassName = 'AbstractFObject';
  var parentModel = '';
  if (this.extendsModel) {
    parentClassName = this.extendsModel;
    parentModel = this.extendsModel + '.MODEL(), ';
  }
  if ( GLOBAL[parentClassName] && GLOBAL[parentClassName].abstract )
    parentClassName = 'Abstract' + parentClassName;
%>
package <%= this.package || 'foam.core' %>;
import foam.core.*;
import foam.dao.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public<%= this.abstract || this.methods.filter(function(m) { return m.javaAbstract; }).length ? ' abstract' : '' %> class <%= className %> extends <%= parentClassName %> {
<% for ( var key in this.properties ) {
  var prop = this.properties[key];
  javaSource.propertySource.call(this, out, javaSource, prop);
} %>
<% if (this.relationships && this.relationships.length) {
  for ( var i = 0; i < this.relationships.length; i++) {
    var rel = this.relationships[i];
    javaSource.relationshipSource.call(this, out, rel);
  }
} %>
final static Model model__ = new AbstractModel(<%= parentModel %>new Property[] {<% var allProps = this.getRuntimeProperties(); for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %> <%= constantize(prop.name) %>,<% } %>} , new Relationship[] {<% if (this.relationships && this.relationships.length) { for (var i = 0; i < this.relationships.length; i++) { %> <%= constantize(this.relationships[i].name) %>, <% } } %> }) {
    public String getName() { return "<%= this.id %>"; }
    public String getShortName() { return "<%= this.name %>"; }
    public String getLabel() { return "<%= this.label %>"; }
    public Property getID() { return <%= this.ids.length ? constantize(this.ids[0]) : 'null' %>; }
    public FObject newInstance() { return new <%= className %>(); }
  };

  public Model model() {
    return model__;
  }
  public static Model MODEL() {
    return model__;
  }

  public int hashCode() {
    int hash = 1;
<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>
    hash = hash * 31 + hash(<%= prop.name %>_);<% } %>

    return hash;
  }

  public int compareTo(Object obj) {
    if ( obj == this ) return 0;
    if ( obj == null ) return 1;

    <%= this.name %> other = (<%= this.name %>) obj;

    int cmp;
<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>
    if ( ( cmp = compare(get<%= prop.name.capitalize() %>(), other.get<%= prop.name.capitalize() %>()) ) != 0 ) return cmp;<% } %>

    return 0;
  }

  public StringBuilder append(StringBuilder b) {
    return b<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>
        .append("<%= prop.name %>=").append(get<%= prop.name.capitalize() %>())<%= i < allProps.length - 1 ? '.append(", ")' : '' %><% } %>;
  }

  public <%= className %> fclone() {
    <%= this.name %> c = new <%= this.name %>();
<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>
    c.set<%= prop.name.capitalize() %>(get<%= prop.name.capitalize() %>());<% } %>
    return c;
  }
<% for ( var key in this.methods ) {
  var method = this.methods[key];
  javaSource.methodSource.call(this, out, javaSource, method);
} %>
}
*/},
  function propertySource(out, javaSource, prop) {/*<%
    if (prop.labels && prop.labels.indexOf(javaSource.flag) === -1) {
      return;
    }
    var rawType, wrapperType, genericPropertyType, baseClass;
    rawType = prop.javaType;

    var toWrapperClass = function(name) {
      return name === 'int'  ? 'Integer' :
          name === 'double'  ? 'Double'  :
          name === 'float'   ? 'Float'   :
          name === 'boolean' ? 'Boolean' : name;
    };

    wrapperType = toWrapperClass(rawType);

    if (rawType.substring(0, 6) === 'Array[') {
      wrapperType = rawType = 'List<' + rawType.substring(6, rawType.length - 1) + '>';
    } else if (rawType === 'Array') {
      wrapperType = rawType = 'List';
    }

    var extraText = '  ';
    var propName = constantize(prop.name);
    var camelName = prop.name.capitalize();

    console.log(prop.javaType, rawType, wrapperType, propName, camelName);
%>
  public final static <%= prop.model_.name %> <%= propName %> = new <%= prop.model_.name %>() {
    public Object get(Object o) { return ((<%= this.name %>) o).get<%= camelName %>(); }
    public void set(Object o, Object v) { ((<%= this.name %>) o).set<%= camelName %>((<%= wrapperType %>) v); }
    public int compare(Object o1, Object o2) { return getCompareProperty().compare(((<%= this.name%>)o1).<%= prop.name %>_, ((<%= this.name%>)o2).<%= prop.name %>_); }
<%= extraText %>};
  static {<%
    var metaprops = prop.model_.getRuntimeProperties().filter(function(p) {
      return !p.labels || p.labels.indexOf(javaSource.flag) !== -1;
    });
    function escapeString(str) {
      return str.replace(/"/g, '\\"');
    }
    for (var i = 0; i < metaprops.length; i++) {
      var valueText;
      if (prop.instance_.hasOwnProperty(metaprops[i].name)) {
        valueText = prop[metaprops[i].name];
        var type = typeof valueText;
        if (type === 'string') {
          valueText = valueText === '' ? undefined : ('"' + escapeString(valueText) + '"');
        } else if (type === 'number' || type === 'boolean') {
          valueText = '' + valueText;
        } else if (type === 'object') {
          if (Array.isArray(valueText)) {
            if (valueText.length === 0) {
              valueText = undefined;
            } else {
              console.warn('Not implemented: Serialization of array-valued metaproperties (prop = ' + metaprops[i].name + ').');
            }
          } else {
            console.warn('Attempt to output object-valued property', metaprops[i].name, valueText);
            valueText = undefined;
          }
        } else {
          valueText = undefined;
        }
      } else {
        valueText = metaprops[i].javaDefaultValue;
        if (valueText === '') valueText = undefined;
      }
      if (valueText !== undefined) {%>
    <%= propName %>.set<%= metaprops[i].name.capitalize() %>(<%= valueText %>);<% } } %>
    <%= propName %>.freeze();
  }

  protected <%= rawType %> <%= prop.name %>_;

  public <%= rawType %> get<%= prop.name.capitalize() %>() {
    return <%= prop.name %>_;
  }

  public void set<%= prop.name.capitalize() %>(<%= rawType %>  nu) {
    if (isFrozen()) throw new FrozenObjectModificationException();
    <%= rawType %> oldValue = <%= prop.name %>_;
    <%= prop.name %>_ = nu;
    if (<%= propName %>.getCompareProperty().compare(oldValue, nu) != 0) {
      firePropertyChange(<%= propName %>, oldValue, nu);
    }
  }
*/},

function methodSource(out, javaSource, method) {/*<% if (method.javaCode || method.javaAbstract) { %>
  public <%= method.javaAbstract ? "abstract " : "" %><%= method.javaReturnType || "void" %> <%= method.name %>(<%
    for (var i = 0; i < method.args.length; i++) {
      var arg = method.args[i];
      %><%= arg.javaType %> <%= arg.name %><%= i < method.args.length - 1 ? ', ' : '' %><%
    }
    out(')');
    if (method.javaAbstract) {
      out(';\u000a');
    } else {
      out('{\u000a    ', method.javaCode, '\u000a  }\u000a');
    }
  } %>*/},

  function relationshipSource(out, rel) {/*<%
    var shortName = rel.relatedModel.split('.').pop();
    shortName = shortName.substring(0, 1).toLowerCase() + shortName.substring(1);
%>
  public final static Relationship <%= constantize(rel.name) %> = new AbstractRelationship() {
    public String getName() { return "<%= rel.name %>"; }
    public String getLabel() { return "<%= rel.label %>"; }
    public DAO get(Object o) { return ((<%= this.name %>) o).get<%= rel.name.capitalize() %>(); }
  };

  private DAO <%= rel.name %>_;

  public DAO get<%= rel.name.capitalize() %>() {
    if (<%= rel.name %>_ == null) {
      Model model = <%= rel.relatedModel %>.MODEL();
      DAO dao = new RelationshipDAO(model, "<%= shortName %>DAO");
      <%= rel.name %>_ = dao.where(MLang.EQ(model.getProperty("<%= rel.relatedProperty %>"), model().getID().get(this)));
    }
    return <%= rel.name %>_;
  }
  */},
  ]
});
